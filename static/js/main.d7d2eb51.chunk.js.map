{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","libs/enums/constants.ts","libs/enums/errorMessages.ts","components/FindMovie/FindMovie.tsx","api.ts","libs/helpers/getNormalizedMovie.ts","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","ErrorMessages","FindMovie","onSelectMovie","_useState","useState","_useState2","_slicedToArray","query","setQuery","_useState3","_useState4","loading","setLoading","_useState5","_useState6","errorMessage","setErrorMessage","_useState7","_useState8","setMovie","_Fragment","htmlFor","type","id","placeholder","classNames","value","onChange","event","target","disabled","onClick","fetch","concat","then","res","json","catch","Response","Error","getMovie","response","notFindMovie","normalizedMovie","movieData","Title","Plot","Poster","imdbID","getNormalizedMovie","error","message","finally","App","setMovies","handleSelectMovie","useCallback","selectedMovie","some","_toConsumableArray","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d7d2eb51.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../libs/types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../libs/types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","/* eslint-disable max-len */\nexport const IMDB_URL = 'https://www.imdb.com/title';\nexport const DEAFULT_PICTURE = 'https://via.placeholder.com/360x270.png?text=no%20preview';\nexport const NOT_AVAILABLE = 'N/A';\n","export enum ErrorMessages {\n  notFindMovie = 'Can\\'t find a movie with such a title',\n}\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './FindMovie.scss';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../libs/types';\nimport { ErrorMessages } from '../../libs/enums';\nimport { getNormalizedMovie } from '../../libs/helpers';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  onSelectMovie: (movie: Movie) => void;\n};\n\nexport const FindMovie: React.FC<Props> = ({ onSelectMovie }) => {\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    setErrorMessage('');\n  };\n\n  const handleLoadMovie = () => {\n    setLoading(true);\n    setMovie(null);\n\n    getMovie(query)\n      .then((response) => {\n        if ('Error' in response) {\n          throw new Error(ErrorMessages.notFindMovie);\n        }\n\n        const normalizedMovie = getNormalizedMovie(response);\n\n        setMovie(normalizedMovie);\n      })\n      .catch((error: Error) => {\n        setErrorMessage(error.message);\n      })\n      .finally(() => setLoading(false));\n  };\n\n  const handleSelectMovie = () => {\n    if (movie) {\n      onSelectMovie(movie);\n      setMovie(null);\n    }\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', {\n                'is-danger': !!errorMessage,\n              })}\n              value={query}\n              onChange={handleChangeQuery}\n            />\n          </div>\n\n          {errorMessage && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              {errorMessage}\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames('button is-light', {\n                'is-loading': loading,\n              })}\n              disabled={!query || loading}\n              onClick={handleLoadMovie}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleSelectMovie}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData, ResponseError } from './libs/types';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=24ae4fc6';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { DEAFULT_PICTURE, IMDB_URL, NOT_AVAILABLE } from '../enums';\nimport { Movie, MovieData } from '../types';\n\nexport const getNormalizedMovie = (movieData: MovieData): Movie => {\n  const {\n    Title: title,\n    Plot: description,\n    Poster,\n    imdbID: imdbId,\n  } = movieData;\n\n  const imgUrl = Poster === NOT_AVAILABLE\n    ? DEAFULT_PICTURE\n    : Poster;\n\n  const imdbUrl = `${IMDB_URL}/${imdbId}`;\n\n  return {\n    title,\n    description,\n    imgUrl,\n    imdbUrl,\n    imdbId,\n  };\n};\n","import { useCallback, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './libs/types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const handleSelectMovie = useCallback((selectedMovie: Movie) => {\n    const isInMoviesList = movies.some(movie => (\n      movie.imdbId === selectedMovie.imdbId\n    ));\n\n    if (!isInMoviesList) {\n      setMovies([...movies, selectedMovie]);\n    }\n  }, [movies]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie onSelectMovie={handleSelectMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}